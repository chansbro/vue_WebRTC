{"remainingRequest":"/Users/seokchanyoo/Desktop/projects/vue_WebRTC/node_modules/babel-loader/lib/index.js!/Users/seokchanyoo/Desktop/projects/vue_WebRTC/node_modules/vuetify-loader/lib/loader.js!/Users/seokchanyoo/Desktop/projects/vue_WebRTC/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/seokchanyoo/Desktop/projects/vue_WebRTC/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/seokchanyoo/Desktop/projects/vue_WebRTC/src/components/RTCPeer.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/seokchanyoo/Desktop/projects/vue_WebRTC/src/components/RTCPeer.vue","mtime":1564242281916},{"path":"/Users/seokchanyoo/Desktop/projects/vue_WebRTC/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/seokchanyoo/Desktop/projects/vue_WebRTC/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/seokchanyoo/Desktop/projects/vue_WebRTC/node_modules/vuetify-loader/lib/loader.js","mtime":1549812933000},{"path":"/Users/seokchanyoo/Desktop/projects/vue_WebRTC/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/seokchanyoo/Desktop/projects/vue_WebRTC/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  data: function data() {\n    return {\n      video: {},\n      localvideo: {},\n      remotevideo: {},\n      localStream: {\n        type: Object\n      },\n      remoteStream: {\n        type: Object\n      },\n      localPeerConnection: {\n        type: Object\n      },\n      remotePeerConnection: {\n        type: Object\n      },\n      offerOptions: {\n        offerToReceiveVideo: 1\n      }\n    };\n  },\n  methods: {\n    gotRemoteMediaStream: function gotRemoteMediaStream(event) {\n      // console.log('Remote stream added.');\n      var mediaStream = event.stream;\n      this.remotevideo = this.$refs.remotevideo;\n      this.remotevideo.srcObject = mediaStream;\n      this.remoteStream = mediaStream;\n    },\n    startAction: function startAction() {\n      var _this = this;\n\n      navigator.mediaDevices.getUserMedia({\n        video: true\n      }).then(function (stream) {\n        _this.localvideo = _this.$refs.localvideo;\n        _this.localvideo.srcObject = stream;\n        _this.localStream = stream;\n      }).catch(function (error) {});\n    },\n    handleConnection: function handleConnection(event) {\n      var peerConnection = event.target;\n      var iceCandidate = event.candidate; // console.log('handleIceCandidate event: ', event);\n\n      if (iceCandidate) {\n        var newIceCandidate = new RTCIceCandidate(iceCandidate);\n        var otherPeer = this.getOtherPeer(peerConnection);\n        otherPeer.addIceCandidate(newIceCandidate).then(function () {}).catch(function (error) {});\n      }\n    },\n    callAction: function callAction() {\n      console.log('Call Action called');\n      this.localStream = this.localvideo.srcObject;\n      var videoTracks = this.localStream.getVideoTracks();\n      this.localPeerConnection = new RTCPeerConnection(null);\n      console.log(this.localPeerConnection);\n      this.localPeerConnection.onicecandidate = this.handleConnection;\n      console.log(this.localPeerConnection.onicecandidate);\n      this.remotePeerConnection = new RTCPeerConnection(null);\n      this.remotePeerConnection.onicecandidate = this.handleConnection;\n      this.remotePeerConnection.onaddstream = this.gotRemoteMediaStream;\n      console.log(this.remotePeerConnection);\n      this.localPeerConnection.addStream(this.localStream);\n      this.localPeerConnection.createOffer(this.offerOptions).then(this.createdOffer).catch(function (error) {});\n    },\n    getPeerName: function getPeerName(peerConnection) {\n      return peerConnection == this.localPeerConnection ? 'localPeerConnection' : 'remotePeerConnection';\n    },\n    getOtherPeer: function getOtherPeer(peerConnection) {\n      return peerConnection == this.localPeerConnection ? this.remotePeerConnection : this.localPeerConnection;\n    },\n    setDescriptionSuccess: function setDescriptionSuccess(peerConnection, functionName) {\n      var peerName = this.getPeerName(peerConnection);\n    },\n    setLocalDescriptionSuccess: function setLocalDescriptionSuccess(peerConnection) {\n      this.setDescriptionSuccess(peerConnection, 'setLocalDescription');\n    },\n    setRemoteDescriptionSuccess: function setRemoteDescriptionSuccess(peerConnection) {\n      this.setDescriptionSuccess(peerConnection, 'setRemoteDescription');\n    },\n    createdOffer: function createdOffer(description) {\n      var _this2 = this;\n\n      console.log('createdOffer', description);\n      this.localPeerConnection.setLocalDescription(description).then(function () {\n        _this2.setLocalDescriptionSuccess(_this2.localPeerConnection);\n      }).catch(function (error) {});\n      this.remotePeerConnection.setRemoteDescription(description).then(function () {\n        _this2.setRemoteDescriptionSuccess(_this2.remotePeerConnection);\n      }).catch(function (error) {});\n      this.remotePeerConnection.createAnswer().then(this.createdAnswer).catch(function (error) {});\n    },\n    createdAnswer: function createdAnswer(description) {\n      var _this3 = this;\n\n      this.remotePeerConnection.setLocalDescription(description).then(function () {\n        _this3.setLocalDescriptionSuccess(_this3.remotePeerConnection);\n      }).catch(function (error) {});\n      this.localPeerConnection.setRemoteDescription(description).then(function () {\n        _this3.setRemoteDescriptionSuccess(_this3.localPeerConnection);\n      }).catch(function (error) {});\n    },\n    hangup: function hangup() {\n      this.localPeerConnection.close();\n      this.remotePeerConnection.close();\n      this.localPeerConnection = null;\n      this.remotePeerConnection = null;\n      this.localStream = this.localvideo.srcObject;\n      this.localStream.getTracks()[0].stop();\n    }\n  }\n};",{"version":3,"sources":["RTCPeer.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCA,eAAA;AACA,EAAA,IAAA,EAAA;AAAA,WAAA;AACA,MAAA,KAAA,EAAA,EADA;AAEA,MAAA,UAAA,EAAA,EAFA;AAGA,MAAA,WAAA,EAAA,EAHA;AAIA,MAAA,WAAA,EAAA;AAAA,QAAA,IAAA,EAAA;AAAA,OAJA;AAKA,MAAA,YAAA,EAAA;AAAA,QAAA,IAAA,EAAA;AAAA,OALA;AAMA,MAAA,mBAAA,EAAA;AAAA,QAAA,IAAA,EAAA;AAAA,OANA;AAOA,MAAA,oBAAA,EAAA;AAAA,QAAA,IAAA,EAAA;AAAA,OAPA;AAQA,MAAA,YAAA,EAAA;AACA,QAAA,mBAAA,EAAA;AADA;AARA,KAAA;AAAA,GADA;AAaA,EAAA,OAAA,EAAA;AACA,IAAA,oBADA,gCACA,KADA,EACA;AACA;AACA,UAAA,WAAA,GAAA,KAAA,CAAA,MAAA;AAEA,WAAA,WAAA,GAAA,KAAA,KAAA,CAAA,WAAA;AACA,WAAA,WAAA,CAAA,SAAA,GAAA,WAAA;AACA,WAAA,YAAA,GAAA,WAAA;AACA,KARA;AASA,IAAA,WATA,yBASA;AAAA;;AACA,MAAA,SAAA,CAAA,YAAA,CAAA,YAAA,CAAA;AAAA,QAAA,KAAA,EAAA;AAAA,OAAA,EACA,IADA,CACA,UAAA,MAAA,EAAA;AACA,QAAA,KAAA,CAAA,UAAA,GAAA,KAAA,CAAA,KAAA,CAAA,UAAA;AACA,QAAA,KAAA,CAAA,UAAA,CAAA,SAAA,GAAA,MAAA;AACA,QAAA,KAAA,CAAA,WAAA,GAAA,MAAA;AACA,OALA,EAKA,KALA,CAKA,UAAA,KAAA,EAAA,CAAA,CALA;AAMA,KAhBA;AAiBA,IAAA,gBAjBA,4BAiBA,KAjBA,EAiBA;AACA,UAAA,cAAA,GAAA,KAAA,CAAA,MAAA;AACA,UAAA,YAAA,GAAA,KAAA,CAAA,SAAA,CAFA,CAIA;;AACA,UAAA,YAAA,EAAA;AACA,YAAA,eAAA,GAAA,IAAA,eAAA,CAAA,YAAA,CAAA;AACA,YAAA,SAAA,GAAA,KAAA,YAAA,CAAA,cAAA,CAAA;AAEA,QAAA,SAAA,CAAA,eAAA,CAAA,eAAA,EACA,IADA,CACA,YAAA,CAEA,CAHA,EAGA,KAHA,CAGA,UAAA,KAAA,EAAA,CACA,CAJA;AAKA;AACA,KAhCA;AAiCA,IAAA,UAjCA,wBAiCA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,oBAAA;AACA,WAAA,WAAA,GAAA,KAAA,UAAA,CAAA,SAAA;AACA,UAAA,WAAA,GAAA,KAAA,WAAA,CAAA,cAAA,EAAA;AAEA,WAAA,mBAAA,GAAA,IAAA,iBAAA,CAAA,IAAA,CAAA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,KAAA,mBAAA;AACA,WAAA,mBAAA,CAAA,cAAA,GAAA,KAAA,gBAAA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,KAAA,mBAAA,CAAA,cAAA;AAEA,WAAA,oBAAA,GAAA,IAAA,iBAAA,CAAA,IAAA,CAAA;AACA,WAAA,oBAAA,CAAA,cAAA,GAAA,KAAA,gBAAA;AAEA,WAAA,oBAAA,CAAA,WAAA,GAAA,KAAA,oBAAA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,KAAA,oBAAA;AAEA,WAAA,mBAAA,CAAA,SAAA,CAAA,KAAA,WAAA;AACA,WAAA,mBAAA,CAAA,WAAA,CAAA,KAAA,YAAA,EACA,IADA,CACA,KAAA,YADA,EACA,KADA,CACA,UAAA,KAAA,EAAA,CAAA,CADA;AAGA,KArDA;AAsDA,IAAA,WAtDA,uBAsDA,cAtDA,EAsDA;AACA,aAAA,cAAA,IAAA,KAAA,mBAAA,GACA,qBADA,GACA,sBADA;AAEA,KAzDA;AA0DA,IAAA,YA1DA,wBA0DA,cA1DA,EA0DA;AACA,aAAA,cAAA,IAAA,KAAA,mBAAA,GACA,KAAA,oBADA,GACA,KAAA,mBADA;AAEA,KA7DA;AA8DA,IAAA,qBA9DA,iCA8DA,cA9DA,EA8DA,YA9DA,EA8DA;AACA,UAAA,QAAA,GAAA,KAAA,WAAA,CAAA,cAAA,CAAA;AACA,KAhEA;AAiEA,IAAA,0BAjEA,sCAiEA,cAjEA,EAiEA;AACA,WAAA,qBAAA,CAAA,cAAA,EAAA,qBAAA;AACA,KAnEA;AAoEA,IAAA,2BApEA,uCAoEA,cApEA,EAoEA;AACA,WAAA,qBAAA,CAAA,cAAA,EAAA,sBAAA;AACA,KAtEA;AAuEA,IAAA,YAvEA,wBAuEA,WAvEA,EAuEA;AAAA;;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,cAAA,EAAA,WAAA;AACA,WAAA,mBAAA,CAAA,mBAAA,CAAA,WAAA,EACA,IADA,CACA,YAAA;AACA,QAAA,MAAA,CAAA,0BAAA,CAAA,MAAA,CAAA,mBAAA;AACA,OAHA,EAGA,KAHA,CAGA,UAAA,KAAA,EAAA,CAAA,CAHA;AAKA,WAAA,oBAAA,CAAA,oBAAA,CAAA,WAAA,EACA,IADA,CACA,YAAA;AACA,QAAA,MAAA,CAAA,2BAAA,CAAA,MAAA,CAAA,oBAAA;AACA,OAHA,EAGA,KAHA,CAGA,UAAA,KAAA,EAAA,CAAA,CAHA;AAKA,WAAA,oBAAA,CAAA,YAAA,GACA,IADA,CACA,KAAA,aADA,EAEA,KAFA,CAEA,UAAA,KAAA,EAAA,CAAA,CAFA;AAGA,KAtFA;AAuFA,IAAA,aAvFA,yBAuFA,WAvFA,EAuFA;AAAA;;AACA,WAAA,oBAAA,CAAA,mBAAA,CAAA,WAAA,EACA,IADA,CACA,YAAA;AACA,QAAA,MAAA,CAAA,0BAAA,CAAA,MAAA,CAAA,oBAAA;AACA,OAHA,EAGA,KAHA,CAGA,UAAA,KAAA,EAAA,CAAA,CAHA;AAKA,WAAA,mBAAA,CAAA,oBAAA,CAAA,WAAA,EACA,IADA,CACA,YAAA;AACA,QAAA,MAAA,CAAA,2BAAA,CAAA,MAAA,CAAA,mBAAA;AACA,OAHA,EAGA,KAHA,CAGA,UAAA,KAAA,EAAA,CAAA,CAHA;AAIA,KAjGA;AAkGA,IAAA,MAlGA,oBAkGA;AACA,WAAA,mBAAA,CAAA,KAAA;AACA,WAAA,oBAAA,CAAA,KAAA;AACA,WAAA,mBAAA,GAAA,IAAA;AACA,WAAA,oBAAA,GAAA,IAAA;AAEA,WAAA,WAAA,GAAA,KAAA,UAAA,CAAA,SAAA;AACA,WAAA,WAAA,CAAA,SAAA,GAAA,CAAA,EAAA,IAAA;AAEA;AA3GA;AAbA,CAAA","sourcesContent":["<template>\r\n    <v-container grid-list-md fluid>\r\n        <v-layout wrap text-center>\r\n            <v-flex xs12>\r\n                <span> This is RTC Peer to Peer Communication</span>\r\n            </v-flex>\r\n            <v-flex xs6>\r\n                <video ref=\"localvideo\" id=\"localvideo\" autoplay playsinline width=\"800\" height=\"600\"></video>\r\n            </v-flex>\r\n            <v-flex xs6>\r\n                <video ref=\"remotevideo\" id=\"remotevideo\" autoplay playsinline width=\"200\" height=\"200\"></video>\r\n            </v-flex>\r\n        </v-layout>\r\n\r\n        <v-layout wrap text-center>\r\n            <v-flex xs4>    \r\n                <v-btn color=\"success\" block @click=\"startAction\"> \r\n                    <span> Start </span>\r\n                </v-btn>\r\n            </v-flex>\r\n            <v-flex xs4>\r\n                <v-btn color=\"warning\" block @click=\"callAction\">\r\n                    <span> Call </span>\r\n                </v-btn>\r\n            </v-flex>\r\n            <v-flex xs4>\r\n                <v-btn color=\"error\" block @click=\"hangup\">\r\n                    <span> Turn off </span>\r\n                </v-btn>\r\n            </v-flex>\r\n        </v-layout>\r\n    </v-container>\r\n    \r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data: () => ({\r\n    video:{},\r\n    localvideo: {},\r\n    remotevideo: {},\r\n    localStream: {type: Object},\r\n    remoteStream: {type: Object},\r\n    localPeerConnection: {type:Object},\r\n    remotePeerConnection: {type:Object},\r\n    offerOptions : {\r\n        offerToReceiveVideo: 1,\r\n    }\r\n  }),\r\n  methods: {\r\n    gotRemoteMediaStream(event) {\r\n        // console.log('Remote stream added.');\r\n        const mediaStream = event.stream;\r\n\r\n        this.remotevideo = this.$refs.remotevideo;\r\n        this.remotevideo.srcObject = mediaStream;\r\n        this.remoteStream = mediaStream;\r\n    },\r\n    startAction() {\r\n        navigator.mediaDevices.getUserMedia({video:true})\r\n            .then((stream) => {\r\n                this.localvideo = this.$refs.localvideo;\r\n                this.localvideo.srcObject = stream;\r\n                this.localStream = stream;\r\n            }).catch(error => {})\r\n    },\r\n    handleConnection(event) {\r\n        const peerConnection = event.target;\r\n        const iceCandidate = event.candidate;\r\n\r\n        // console.log('handleIceCandidate event: ', event);\r\n        if (iceCandidate) {\r\n            const newIceCandidate = new RTCIceCandidate(iceCandidate);\r\n            const otherPeer = this.getOtherPeer(peerConnection);\r\n\r\n            otherPeer.addIceCandidate(newIceCandidate)\r\n            .then(() => {\r\n                \r\n            }).catch((error) => {\r\n            });\r\n        }     \r\n    },\r\n    callAction() {\r\n        console.log('Call Action called');\r\n        this.localStream = this.localvideo.srcObject;\r\n        const videoTracks = this.localStream.getVideoTracks();\r\n\r\n        this.localPeerConnection = new RTCPeerConnection(null);\r\n        console.log(this.localPeerConnection);\r\n        this.localPeerConnection.onicecandidate = this.handleConnection;\r\n        console.log(this.localPeerConnection.onicecandidate);\r\n\r\n        this.remotePeerConnection = new RTCPeerConnection(null);\r\n        this.remotePeerConnection.onicecandidate = this.handleConnection;\r\n\r\n        this.remotePeerConnection.onaddstream = this.gotRemoteMediaStream;\r\n        console.log(this.remotePeerConnection);\r\n\r\n        this.localPeerConnection.addStream(this.localStream);\r\n        this.localPeerConnection.createOffer(this.offerOptions)\r\n            .then(this.createdOffer).catch((error)=>{});\r\n\r\n    },\r\n    getPeerName(peerConnection) {\r\n        return (peerConnection == this.localPeerConnection) ?\r\n            'localPeerConnection' : 'remotePeerConnection';\r\n    },\r\n    getOtherPeer(peerConnection) {\r\n        return (peerConnection == this.localPeerConnection) ?\r\n            this.remotePeerConnection : this.localPeerConnection;\r\n    },\r\n    setDescriptionSuccess(peerConnection, functionName){\r\n        const peerName = this.getPeerName(peerConnection);\r\n    },\r\n    setLocalDescriptionSuccess(peerConnection) {\r\n        this.setDescriptionSuccess(peerConnection, 'setLocalDescription');\r\n    },\r\n    setRemoteDescriptionSuccess(peerConnection) {\r\n        this.setDescriptionSuccess(peerConnection, 'setRemoteDescription');\r\n    },\r\n    createdOffer(description) {\r\n        console.log('createdOffer', description);\r\n        this.localPeerConnection.setLocalDescription(description)\r\n            .then(()=> {\r\n                this.setLocalDescriptionSuccess(this.localPeerConnection);\r\n            }).catch((error)=> {});\r\n\r\n        this.remotePeerConnection.setRemoteDescription(description)\r\n            .then(() => {\r\n                this.setRemoteDescriptionSuccess(this.remotePeerConnection);\r\n            }).catch((error) => {})\r\n        \r\n        this.remotePeerConnection.createAnswer()\r\n            .then(this.createdAnswer)\r\n            .catch((error) => {})\r\n    },\r\n    createdAnswer(description) {\r\n        this.remotePeerConnection.setLocalDescription(description)\r\n            .then(() => {\r\n                this.setLocalDescriptionSuccess(this.remotePeerConnection);\r\n            }).catch((error) => {});\r\n\r\n        this.localPeerConnection.setRemoteDescription(description)\r\n            .then(() => {\r\n                this.setRemoteDescriptionSuccess(this.localPeerConnection);\r\n            }).catch((error) => {});\r\n    },\r\n    hangup() {\r\n        this.localPeerConnection.close();\r\n        this.remotePeerConnection.close();\r\n        this.localPeerConnection = null;\r\n        this.remotePeerConnection = null;\r\n\r\n        this.localStream = this.localvideo.srcObject;    \r\n        this.localStream.getTracks()[0].stop();\r\n\r\n    }\r\n\r\n  }\r\n};\r\n</script>\r\n\r\n<style>\r\n\r\n</style>"],"sourceRoot":"src/components"}]}