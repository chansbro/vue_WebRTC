{"remainingRequest":"/Users/seokchanyoo/Desktop/projects/vue_WebRTC/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/seokchanyoo/Desktop/projects/vue_WebRTC/src/components/RTCPeer.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/seokchanyoo/Desktop/projects/vue_WebRTC/src/components/RTCPeer.vue","mtime":1564242281916},{"path":"/Users/seokchanyoo/Desktop/projects/vue_WebRTC/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/seokchanyoo/Desktop/projects/vue_WebRTC/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/seokchanyoo/Desktop/projects/vue_WebRTC/node_modules/vuetify-loader/lib/loader.js","mtime":1549812933000},{"path":"/Users/seokchanyoo/Desktop/projects/vue_WebRTC/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/seokchanyoo/Desktop/projects/vue_WebRTC/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nexport default {\r\n  data: () => ({\r\n    video:{},\r\n    localvideo: {},\r\n    remotevideo: {},\r\n    localStream: {type: Object},\r\n    remoteStream: {type: Object},\r\n    localPeerConnection: {type:Object},\r\n    remotePeerConnection: {type:Object},\r\n    offerOptions : {\r\n        offerToReceiveVideo: 1,\r\n    }\r\n  }),\r\n  methods: {\r\n    gotRemoteMediaStream(event) {\r\n        // console.log('Remote stream added.');\r\n        const mediaStream = event.stream;\r\n\r\n        this.remotevideo = this.$refs.remotevideo;\r\n        this.remotevideo.srcObject = mediaStream;\r\n        this.remoteStream = mediaStream;\r\n    },\r\n    startAction() {\r\n        navigator.mediaDevices.getUserMedia({video:true})\r\n            .then((stream) => {\r\n                this.localvideo = this.$refs.localvideo;\r\n                this.localvideo.srcObject = stream;\r\n                this.localStream = stream;\r\n            }).catch(error => {})\r\n    },\r\n    handleConnection(event) {\r\n        const peerConnection = event.target;\r\n        const iceCandidate = event.candidate;\r\n\r\n        // console.log('handleIceCandidate event: ', event);\r\n        if (iceCandidate) {\r\n            const newIceCandidate = new RTCIceCandidate(iceCandidate);\r\n            const otherPeer = this.getOtherPeer(peerConnection);\r\n\r\n            otherPeer.addIceCandidate(newIceCandidate)\r\n            .then(() => {\r\n                \r\n            }).catch((error) => {\r\n            });\r\n        }     \r\n    },\r\n    callAction() {\r\n        console.log('Call Action called');\r\n        this.localStream = this.localvideo.srcObject;\r\n        const videoTracks = this.localStream.getVideoTracks();\r\n\r\n        this.localPeerConnection = new RTCPeerConnection(null);\r\n        console.log(this.localPeerConnection);\r\n        this.localPeerConnection.onicecandidate = this.handleConnection;\r\n        console.log(this.localPeerConnection.onicecandidate);\r\n\r\n        this.remotePeerConnection = new RTCPeerConnection(null);\r\n        this.remotePeerConnection.onicecandidate = this.handleConnection;\r\n\r\n        this.remotePeerConnection.onaddstream = this.gotRemoteMediaStream;\r\n        console.log(this.remotePeerConnection);\r\n\r\n        this.localPeerConnection.addStream(this.localStream);\r\n        this.localPeerConnection.createOffer(this.offerOptions)\r\n            .then(this.createdOffer).catch((error)=>{});\r\n\r\n    },\r\n    getPeerName(peerConnection) {\r\n        return (peerConnection == this.localPeerConnection) ?\r\n            'localPeerConnection' : 'remotePeerConnection';\r\n    },\r\n    getOtherPeer(peerConnection) {\r\n        return (peerConnection == this.localPeerConnection) ?\r\n            this.remotePeerConnection : this.localPeerConnection;\r\n    },\r\n    setDescriptionSuccess(peerConnection, functionName){\r\n        const peerName = this.getPeerName(peerConnection);\r\n    },\r\n    setLocalDescriptionSuccess(peerConnection) {\r\n        this.setDescriptionSuccess(peerConnection, 'setLocalDescription');\r\n    },\r\n    setRemoteDescriptionSuccess(peerConnection) {\r\n        this.setDescriptionSuccess(peerConnection, 'setRemoteDescription');\r\n    },\r\n    createdOffer(description) {\r\n        console.log('createdOffer', description);\r\n        this.localPeerConnection.setLocalDescription(description)\r\n            .then(()=> {\r\n                this.setLocalDescriptionSuccess(this.localPeerConnection);\r\n            }).catch((error)=> {});\r\n\r\n        this.remotePeerConnection.setRemoteDescription(description)\r\n            .then(() => {\r\n                this.setRemoteDescriptionSuccess(this.remotePeerConnection);\r\n            }).catch((error) => {})\r\n        \r\n        this.remotePeerConnection.createAnswer()\r\n            .then(this.createdAnswer)\r\n            .catch((error) => {})\r\n    },\r\n    createdAnswer(description) {\r\n        this.remotePeerConnection.setLocalDescription(description)\r\n            .then(() => {\r\n                this.setLocalDescriptionSuccess(this.remotePeerConnection);\r\n            }).catch((error) => {});\r\n\r\n        this.localPeerConnection.setRemoteDescription(description)\r\n            .then(() => {\r\n                this.setRemoteDescriptionSuccess(this.localPeerConnection);\r\n            }).catch((error) => {});\r\n    },\r\n    hangup() {\r\n        this.localPeerConnection.close();\r\n        this.remotePeerConnection.close();\r\n        this.localPeerConnection = null;\r\n        this.remotePeerConnection = null;\r\n\r\n        this.localStream = this.localvideo.srcObject;    \r\n        this.localStream.getTracks()[0].stop();\r\n\r\n    }\r\n\r\n  }\r\n};\r\n",{"version":3,"sources":["RTCPeer.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAofile":"RTCPeer.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n    <v-container grid-list-md fluid>\r\n        <v-layout wrap text-center>\r\n            <v-flex xs12>\r\n                <span> This is RTC Peer to Peer Communication</span>\r\n            </v-flex>\r\n            <v-flex xs6>\r\n                <video ref=\"localvideo\" id=\"localvideo\" autoplay playsinline width=\"800\" height=\"600\"></video>\r\n            </v-flex>\r\n            <v-flex xs6>\r\n                <video ref=\"remotevideo\" id=\"remotevideo\" autoplay playsinline width=\"200\" height=\"200\"></video>\r\n            </v-flex>\r\n        </v-layout>\r\n\r\n        <v-layout wrap text-center>\r\n            <v-flex xs4>    \r\n                <v-btn color=\"success\" block @click=\"startAction\"> \r\n                    <span> Start </span>\r\n                </v-btn>\r\n            </v-flex>\r\n            <v-flex xs4>\r\n                <v-btn color=\"warning\" block @click=\"callAction\">\r\n                    <span> Call </span>\r\n                </v-btn>\r\n            </v-flex>\r\n            <v-flex xs4>\r\n                <v-btn color=\"error\" block @click=\"hangup\">\r\n                    <span> Turn off </span>\r\n                </v-btn>\r\n            </v-flex>\r\n        </v-layout>\r\n    </v-container>\r\n    \r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data: () => ({\r\n    video:{},\r\n    localvideo: {},\r\n    remotevideo: {},\r\n    localStream: {type: Object},\r\n    remoteStream: {type: Object},\r\n    localPeerConnection: {type:Object},\r\n    remotePeerConnection: {type:Object},\r\n    offerOptions : {\r\n        offerToReceiveVideo: 1,\r\n    }\r\n  }),\r\n  methods: {\r\n    gotRemoteMediaStream(event) {\r\n        // console.log('Remote stream added.');\r\n        const mediaStream = event.stream;\r\n\r\n        this.remotevideo = this.$refs.remotevideo;\r\n        this.remotevideo.srcObject = mediaStream;\r\n        this.remoteStream = mediaStream;\r\n    },\r\n    startAction() {\r\n        navigator.mediaDevices.getUserMedia({video:true})\r\n            .then((stream) => {\r\n                this.localvideo = this.$refs.localvideo;\r\n                this.localvideo.srcObject = stream;\r\n                this.localStream = stream;\r\n            }).catch(error => {})\r\n    },\r\n    handleConnection(event) {\r\n        const peerConnection = event.target;\r\n        const iceCandidate = event.candidate;\r\n\r\n        // console.log('handleIceCandidate event: ', event);\r\n        if (iceCandidate) {\r\n            const newIceCandidate = new RTCIceCandidate(iceCandidate);\r\n            const otherPeer = this.getOtherPeer(peerConnection);\r\n\r\n            otherPeer.addIceCandidate(newIceCandidate)\r\n            .then(() => {\r\n                \r\n            }).catch((error) => {\r\n            });\r\n        }     \r\n    },\r\n    callAction() {\r\n        console.log('Call Action called');\r\n        this.localStream = this.localvideo.srcObject;\r\n        const videoTracks = this.localStream.getVideoTracks();\r\n\r\n        this.localPeerConnection = new RTCPeerConnection(null);\r\n        console.log(this.localPeerConnection);\r\n        this.localPeerConnection.onicecandidate = this.handleConnection;\r\n        console.log(this.localPeerConnection.onicecandidate);\r\n\r\n        this.remotePeerConnection = new RTCPeerConnection(null);\r\n        this.remotePeerConnection.onicecandidate = this.handleConnection;\r\n\r\n        this.remotePeerConnection.onaddstream = this.gotRemoteMediaStream;\r\n        console.log(this.remotePeerConnection);\r\n\r\n        this.localPeerConnection.addStream(this.localStream);\r\n        this.localPeerConnection.createOffer(this.offerOptions)\r\n            .then(this.createdOffer).catch((error)=>{});\r\n\r\n    },\r\n    getPeerName(peerConnection) {\r\n        return (peerConnection == this.localPeerConnection) ?\r\n            'localPeerConnection' : 'remotePeerConnection';\r\n    },\r\n    getOtherPeer(peerConnection) {\r\n        return (peerConnection == this.localPeerConnection) ?\r\n            this.remotePeerConnection : this.localPeerConnection;\r\n    },\r\n    setDescriptionSuccess(peerConnection, functionName){\r\n        const peerName = this.getPeerName(peerConnection);\r\n    },\r\n    setLocalDescriptionSuccess(peerConnection) {\r\n        this.setDescriptionSuccess(peerConnection, 'setLocalDescription');\r\n    },\r\n    setRemoteDescriptionSuccess(peerConnection) {\r\n        this.setDescriptionSuccess(peerConnection, 'setRemoteDescription');\r\n    },\r\n    createdOffer(description) {\r\n        console.log('createdOffer', description);\r\n        this.localPeerConnection.setLocalDescription(description)\r\n            .then(()=> {\r\n                this.setLocalDescriptionSuccess(this.localPeerConnection);\r\n            }).catch((error)=> {});\r\n\r\n        this.remotePeerConnection.setRemoteDescription(description)\r\n            .then(() => {\r\n                this.setRemoteDescriptionSuccess(this.remotePeerConnection);\r\n            }).catch((error) => {})\r\n        \r\n        this.remotePeerConnection.createAnswer()\r\n            .then(this.createdAnswer)\r\n            .catch((error) => {})\r\n    },\r\n    createdAnswer(description) {\r\n        this.remotePeerConnection.setLocalDescription(description)\r\n            .then(() => {\r\n                this.setLocalDescriptionSuccess(this.remotePeerConnection);\r\n            }).catch((error) => {});\r\n\r\n        this.localPeerConnection.setRemoteDescription(description)\r\n            .then(() => {\r\n                this.setRemoteDescriptionSuccess(this.localPeerConnection);\r\n            }).catch((error) => {});\r\n    },\r\n    hangup() {\r\n        this.localPeerConnection.close();\r\n        this.remotePeerConnection.close();\r\n        this.localPeerConnection = null;\r\n        this.remotePeerConnection = null;\r\n\r\n        this.localStream = this.localvideo.srcObject;    \r\n        this.localStream.getTracks()[0].stop();\r\n\r\n    }\r\n\r\n  }\r\n};\r\n</script>\r\n\r\n<style>\r\n\r\n</style>"]}]}